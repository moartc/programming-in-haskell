Exercise 1:

v = gametree empty O

countnodes :: Tree Grid -> Int
countnodes (Node _ [])     = 1
countnodes (Node _ (x:xs)) = 1 + countnodes x + sum [countnodes x | x <- xs]

maxdepth :: Tree Grid -> Int
maxdepth (Node _ [])     = 1
maxdepth (Node _ (x:xs)) = 1 + mymax [maxdepth x | x <- xs]

mymax :: [Int] -> Int
mymax [] = 0
mymax x  = maximum x

To verify call: 
>  countnodes v
> maxdepth v
=========================================

Exercise 2:

Changes in previous version:

bestmoves' :: Grid -> Player -> [Grid]
bestmoves' g p = [g' | Node (g',p') _ <- ts, p' == best]
                 where
                     tree = prune depth (gametree g p)
                     Node (_,best) ts = minimax tree

random :: [Grid] -> IO Grid
random g = do
    idx <- randomRIO(0,length g -1)
    return $ g !! idx
  

randomBest :: Grid -> Player -> IO Grid
randomBest g p =  random (bestmoves' g p)

play' :: Grid -> Player -> IO ()
play' g p | wins O g = putStrLn "Player O wins!\n"
          | wins X g = putStrLn "Player X wins!\n"
          | full g   = putStrLn "It's a draw!\n"
          | p == O = do i <- getNat (prompt p)
                        case move g i p of
                             [] -> do putStrLn "ERROR: Invalid move"
                                      play' g p
                             [g'] -> play g' (next p)
          | p == X = do putStr "Player X is thinking... "
                        move <- randomBest g p
                        (play $! move) (next p)
=========================================

Exercise 3:

Solution in file exercise3.hs

sample game before / after changes:

before:
   |   |   
   | O |   
   |   |   
-----------
   |   |   
   |   |    
   |   |   
-----------
   |   |   
   |   |   
   |   |   

   |   |   
 X | O |   
   |   |   
-----------
   |   |   
   |   |    
   |   |   
-----------
   |   |   
   |   |  
   |   |   

   |   |   
 X | O |   
   |   |   
-----------
   |   |   
   |   |    
   |   |   
-----------
   |   |   
   |   | O 
   |   |   

   |   |   
 X | O |   
   |   |   
-----------
   |   |   
   | X |    
   |   |   
-----------
   |   |   
   |   | O 
   |   |  

last move will not provide the faster win,

after changes:

   |   |   
   | O |   
   |   |   
-----------
   |   |   
   |   |    
   |   |   
-----------
   |   |   
   |   |   
   |   |   

   |   |   
 X | O |   
   |   |   
-----------
   |   |   
   |   |    
   |   |   
-----------
   |   |   
   |   |  
   |   |   

   |   |   
 X | O |   
   |   |   
-----------
   |   |   
   |   |    
   |   |   
-----------
   |   |   
   |   | O 
   |   |   

   |   |   
 X | O |   
   |   |   
-----------
   |   |   
   |   |    
   |   |   
-----------
   |   |   
 X |   | O 
   |   |  

this move makes sense
=========================================

Exercise 4:

Solution for 4a and 4b in file exercise4.hs
Solution for 4c in file exercise 4c,hs.
I thought I had to implement a search for a current grid, but the program somehow works without it.
Searching worked on the small test, but after adding to the program throws the error:
"Exception: Prelude.head: empty list" so it's to fix.
=========================================