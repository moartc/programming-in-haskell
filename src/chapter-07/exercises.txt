Exercise 1:
[f x | x <- xs, p x]

map f (filter p xs)
p :: a -> Bool
f :: a -> b
=========================================

Exercise 2:
all :: (a -> Bool) -> [Bool] -> Bool
2nd arg changed to [a], because I think it doesn't make sense with [Bool]:

all' :: (a -> Bool) -> [a] -> Bool
all' f []     = True
all' f (x:xs) = f x && all' f (xs)

any' :: (a -> Bool) -> [a] -> Bool
any' f []     = False
any' f (x:xs) = f x || any' f (xs)

takeWhile' :: (a -> Bool) -> [a] -> [a]
takeWhile' f []                     = []
takeWhile' f (x:xs) | f x == False  = []
                    | otherwise = x : takeWhile' f xs

dropWhile' :: (a -> Bool) -> [a] -> [a]
dropWhile' f [] = []
dropWhile' f (x:xs) | f x == False = x:xs
                    | otherwise    = dropWhile' f xs
=========================================

Exercise 3:
map :: (a -> b) -> [a] -> [b]
map f xs = [f x | x <- xs]

filter :: (a -> Bool) -> [a] -> [a]
filter p xs = [x | x <- xs, p x]

my implementation of map:
map' :: (a -> b) -> [a] -> [b]
map' = foldr (\f)
map' f = foldr (\x xs -> f x : xs) []

my implementation of filter:
filter' :: (a -> Bool) -> [a] -> [a]
filter' f = foldr (\x xs -> if f(x) then x : xs else xs) []

=========================================

Exercise 4:

dec2int :: [Int] -> Int
dec2int = foldl (\acc x -> x + 10*acc) 0
=========================================

Exercise 5:

Example of curried function from previous chapter:
add’ :: Int -> (Int -> Int)
add’ x y = x + y

Example of function on pair:
product' :: (Int, Int) -> Int
product' (a,b) = a * b

curry' should take function 'product' with 2 arguments
curry' product' 2 4

uncurry' should take function add' with pair argument
uncurry' add' (2, 4)

curry' :: ((a,b) -> c) -> (a -> b -> c)
curry' f x y = f(x,y)

uncurry' :: (a -> (b -> c)) -> ((a,b) -> c)
uncurry' f(x, y) = f x y
=========================================

Exercise 6:
unfold p h t x | p x       = []
               | otherwise = h x : unfold p h t (t x)
example :
int2bin = unfold (== 0) (‘mod‘ 2) (‘div‘ 2)

Redeﬁne the functions chop8, map f and iterate f using unfold.

chop8 original definition:
chop8 :: [Bit] -> [[Bit]]
chop8 [] = []
chop8 bits = take 8 bits : chop8 (drop 8 bits)

my implementation of chop8:
chop8' :: [Bit] -> [[Bit]]
chop8' = unfold (\x -> length x == 0) (take 8) (drop 8)

my implementation of map:
map2 :: (a -> b) -> [a] -> [b]
map2 f = unfold (\x -> length x == 0) (\x -> f (head x)) (drop 1)

my implementation of iterate:
should return:
take 10 (iterate' (+1) 0)
[0,1,2,3,4,5,6,7,8,9]

take 5 (iterate (*3) 1)
[1,3,9,27,81]

iterate' :: (a -> a) -> a -> [a]
iterate' f = unfold (\_ -> False) (\x -> x) (\x -> f(x))
=========================================

Exercise 7:

Solution in file BinaryStringTransmitterExercise.hs
=========================================

Exercise 8:

Solution in file BinaryStringTransmitterExercise.hs
=========================================

Exercise 9:

altMap :: (a -> b) -> (a -> b) -> [a] -> [b]
altMap f1 f2 xs = [if(b `mod` 2 == 0) then f1 (a) else f2 (a) | (a, b) <- zip xs [0..]]
=========================================

Exercise 10:
Solution in file LuhnAlgorithm.hs
=========================================
