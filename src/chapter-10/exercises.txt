Exercise 1:

putStr' xs = sequence_ [putChar x | x <- xs]
=========================================

Exercise 2:

putBoard' :: Board -> IO ()
putBoard' b = putBoardAux b 1

putBoardAux :: Board -> Int -> IO ()
putBoardAux [] _ = return ()
putBoardAux (b:bs) r = do putRow r b
                          putBoardAux bs (r+1)
=========================================

Exercise 3:

putBoard'' :: Board -> IO ()
putBoard'' bs = sequence_ [putRow r b | (r,b) <- zip [1..] bs]
=========================================

Exercise 4:

newline :: IO()
newline = putChar '\n'

getDigit :: IO Int
getDigit = do x <- getChar
              if isDigit x then
                 return (digitToInt x)
              else
                 do putStrLn "ERROR: Invalid digit"
                    getDigit


readNumbers :: Int -> IO [Int]
readNumbers 0 = return []
readNumbers x = do n <- getDigit
                   newline
                   ns <- readNumbers (x-1)
                   return (n:ns)

sumDigits :: [Int] -> Int
sumDigits [] = 0
sumDigits (x:xs) = x + sumDigits xs


adder :: IO ()
adder = do putStr "How many numbers? "
           nb <- getDigit
           newline
           nums <- readNumbers nb
           putStr "The total is "
           putStrLn (show (sum nums))
=========================================

Exercise 5:

getDigit' :: IO Int
getDigit' = do x <- getChar
               newline
               if isDigit x then
                  return (digitToInt x)
               else
                  do putStrLn "ERROR: Invalid digit"
                     getDigit'
getDigits 0 = []
getDigits n = getDigit' : getDigits (n-1)

xx n = sequence (getDigits n)


adder' :: IO ()
adder' = do putStr "How many numbers? "
            nb <- getDigit'
            nums <- sequence (getDigits nb)
            putStr "The total is "
            print (sum nums)
=========================================

Exercise 6:

getCh :: IO Char
getCh = do hSetEcho stdin False
           x <- getChar
           hSetEcho stdin True
           return x

readLine = readLine' ""

readLine' xs  = do x <- getCh
                   if x == '\n' then
                      do putChar x
                         return xs
                   else
                      if x == '\DEL' then
                         do putStr "\b \b"                            
                            if not (null xs) then
                               readLine' (init xs)
                            else
                               readLine' ""
                      else
                         do putChar '-'
                            readLine' (xs ++ [x])
=========================================