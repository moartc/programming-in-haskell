Exercise 1:
1. [’a’,’b’,’c’] -> [Char]
2. (’a’,’b’,’c’) -> (Char, Char, Char)
3. [(False,’O’),(True,’1’)] -> [(Bool, Char)]
4. ([False,True],[’0’,’1’]) -> ([Bool], [Char])
5. [tail, init, reverse] -> [[a] -> [a]]
=========================================

Exercise 2:
1. bools :: [Bool]
bools = [True, False]
2. nums :: [[Int]]
nums = [[1, 2], [3, 4], [5, 6]]
3. add :: Int -> Int -> Int -> Int
add :: Int -> Int -> Int -> Int
add x y z = x + y + z
4. copy :: a -> (a,a)
copy x = (x, x)
5. apply :: (a -> b) -> a -> b
apply a b = a b
=========================================

Exercise 3:
1. second xs = head (tail xs)
[a] -> a

2. swap (x,y) = (y,x)
(a, b) -> (b, a)

3. pair x y = (x,y)
a -> b -> (a, b)

4. double x = x*2
a -> a

5. palindrome xs = reverse xs == xs
[a] -> Bool

6. twice f x = f (f x)
x :: a
f :: a -> a
twice :: (a -> a) -> a -> a
=========================================

Exercise 4:
--
=========================================

Exercise 5:
Why is it not feasible in general?
Is not feasible because of infinite number of possible arguments. We would
have to check returned result for all of them.

When is it feasible?
When functions take arguments whose types have a limited number of values,
e.g. Bool.
